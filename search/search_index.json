{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DataBase #1 Configure Postgres + PGAdmin usando docker Vamos aprender neste documento como criar dois containers interligados pela mesma network e criar um banco, 3 tabelas relacionadas e 5 registros em cada. Entendendo o docker compose Vamos utilizar um arquivo que est\u00e1 localizado em ./docker-compose/PostgreSQL/docker-compose.yml, onde vamos declarar qual imagem e setar algumas vari\u00e1veis para configurar tanto nosso banco postgre e tamb\u00e9m o pgadmin para nos ajudar a interagir com este banco. version: \"3\" services: postgres-2: image: postgres:alpine environment: POSTGRES_PASSWORD: \"postgres\" ports: - \"5555:5555\" volumes: - /Users/a116822/npc/ads-database/docker-compose/PostgreSQL/Data:/var/lib/postgresql/data networks: - postgres-compose-network pgadmin-2: image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: \"andretmaciel@gmail.com\" PGADMIN_DEFAULT_PASSWORD: \"postgres\" ports: - \"16543:80\" depends_on: - postgres-2 networks: - postgres-compose-network networks: postgres-compose-network: driver: bridge Create Tables Para criar as tabelas utilizei os seguintes comandos abaixo: Tabela Clientes Na tabela de clientes temos v\u00e1rios campos que s\u00e3o referentes aos clientes, para cadastro posterior em alguma aplica\u00e7\u00e3o web, por exemplo. CREATE TABLE dbo . cliente ( id_cliente int NOT NULL , nome varchar ( 100 ) DEFAULT NULL , dtnasc date DEFAULT NULL , cpf varchar ( 14 ) DEFAULT NULL , cnh varchar ( 11 ) DEFAULT NULL , endereco varchar ( 250 ) DEFAULT NULL , PRIMARY KEY ( id_cliente ) ) Tabela Carros A tabela carro tamb\u00e9m segue a mesma l\u00f3gica da tabela de clientes, utilizando somente uma chave prim\u00e1ria e por enquanto nenhuma foreign key . CREATE TABLE dbo . carros ( id_carro int NOT NULL , placa char ( 8 ) DEFAULT NULL , marca VARCHAR ( 100 ) DEFAULT NULL , modelo varchar ( 100 ) DEFAULT NULL , ano int DEFAULT NULL , kmatual int DEFAULT NULL , valorkm bigint DEFAULT NULL , PRIMARY KEY ( id_carro ) ) Tabela Aluguel Esta tabela faz referencias para as chaves secund\u00e1rias vindo da tabela carros e clientes . CREATE TABLE dbo . aluguel ( id_aluguel int NOT NULL , id_cliente int NOT NULL , id_carro int NOT NULL , dtaluguelinicial date default null , dtaluguelfinal date DEFAULT NULL , kminicial int DEFAULT NULL , kmfinal int DEFAULT NULL , valortotal bigint DEFAULT NULL , PRIMARY KEY ( id_aluguel ), CONSTRAINT aluguel_ibfk_1 FOREIGN KEY ( id_cliente ) REFERENCES dbo . cliente ( id_cliente ), CONSTRAINT aluguel_ibfk_2 FOREIGN KEY ( id_carro ) REFERENCES dbo . carros ( id_carro ) ) Inserindo registros Segundo a tarefa passada pelo professor, devemos inserir 5 registros em cada tabela. Insert Into Carros Como vcs podem ver no c\u00f3digo abaixo, eu utilizei uma extens\u00e3o do VSCODE chamada Prettier para formatar o c\u00f3digo de uma maneira mais leg\u00edvel - inclusive estou utilizando em todo o meu reposit\u00f3rio. INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 1 , 'hjs-7929' , 'Onix' , 'std' , 2019 , 1000 , 50 . 92 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 2 , 'pwd-1234' , 'BMW' , 'Advanced' , 2020 , 15000 , 80 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 3 , 'peg-5520' , 'Pegeaut' , '207' , 1999 , 100000 , 15 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 4 , 'fer-1111' , 'Ferrari' , 'Vermelha' , 2014 , 15000 , 75 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 5 , 'cit-9999' , 'Citroen' , 'c3' , 2006 , 45000 , 40 );","title":"DataBase #1"},{"location":"#database-1","text":"","title":"DataBase #1"},{"location":"#configure-postgres-pgadmin-usando-docker","text":"Vamos aprender neste documento como criar dois containers interligados pela mesma network e criar um banco, 3 tabelas relacionadas e 5 registros em cada.","title":"Configure Postgres + PGAdmin usando docker"},{"location":"#entendendo-o-docker-compose","text":"Vamos utilizar um arquivo que est\u00e1 localizado em ./docker-compose/PostgreSQL/docker-compose.yml, onde vamos declarar qual imagem e setar algumas vari\u00e1veis para configurar tanto nosso banco postgre e tamb\u00e9m o pgadmin para nos ajudar a interagir com este banco. version: \"3\" services: postgres-2: image: postgres:alpine environment: POSTGRES_PASSWORD: \"postgres\" ports: - \"5555:5555\" volumes: - /Users/a116822/npc/ads-database/docker-compose/PostgreSQL/Data:/var/lib/postgresql/data networks: - postgres-compose-network pgadmin-2: image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: \"andretmaciel@gmail.com\" PGADMIN_DEFAULT_PASSWORD: \"postgres\" ports: - \"16543:80\" depends_on: - postgres-2 networks: - postgres-compose-network networks: postgres-compose-network: driver: bridge","title":"Entendendo o docker compose"},{"location":"#create-tables","text":"Para criar as tabelas utilizei os seguintes comandos abaixo:","title":"Create Tables"},{"location":"#tabela-clientes","text":"Na tabela de clientes temos v\u00e1rios campos que s\u00e3o referentes aos clientes, para cadastro posterior em alguma aplica\u00e7\u00e3o web, por exemplo. CREATE TABLE dbo . cliente ( id_cliente int NOT NULL , nome varchar ( 100 ) DEFAULT NULL , dtnasc date DEFAULT NULL , cpf varchar ( 14 ) DEFAULT NULL , cnh varchar ( 11 ) DEFAULT NULL , endereco varchar ( 250 ) DEFAULT NULL , PRIMARY KEY ( id_cliente ) )","title":"Tabela Clientes"},{"location":"#tabela-carros","text":"A tabela carro tamb\u00e9m segue a mesma l\u00f3gica da tabela de clientes, utilizando somente uma chave prim\u00e1ria e por enquanto nenhuma foreign key . CREATE TABLE dbo . carros ( id_carro int NOT NULL , placa char ( 8 ) DEFAULT NULL , marca VARCHAR ( 100 ) DEFAULT NULL , modelo varchar ( 100 ) DEFAULT NULL , ano int DEFAULT NULL , kmatual int DEFAULT NULL , valorkm bigint DEFAULT NULL , PRIMARY KEY ( id_carro ) )","title":"Tabela Carros"},{"location":"#tabela-aluguel","text":"Esta tabela faz referencias para as chaves secund\u00e1rias vindo da tabela carros e clientes . CREATE TABLE dbo . aluguel ( id_aluguel int NOT NULL , id_cliente int NOT NULL , id_carro int NOT NULL , dtaluguelinicial date default null , dtaluguelfinal date DEFAULT NULL , kminicial int DEFAULT NULL , kmfinal int DEFAULT NULL , valortotal bigint DEFAULT NULL , PRIMARY KEY ( id_aluguel ), CONSTRAINT aluguel_ibfk_1 FOREIGN KEY ( id_cliente ) REFERENCES dbo . cliente ( id_cliente ), CONSTRAINT aluguel_ibfk_2 FOREIGN KEY ( id_carro ) REFERENCES dbo . carros ( id_carro ) )","title":"Tabela Aluguel"},{"location":"#inserindo-registros","text":"Segundo a tarefa passada pelo professor, devemos inserir 5 registros em cada tabela.","title":"Inserindo registros"},{"location":"#insert-into-carros","text":"Como vcs podem ver no c\u00f3digo abaixo, eu utilizei uma extens\u00e3o do VSCODE chamada Prettier para formatar o c\u00f3digo de uma maneira mais leg\u00edvel - inclusive estou utilizando em todo o meu reposit\u00f3rio. INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 1 , 'hjs-7929' , 'Onix' , 'std' , 2019 , 1000 , 50 . 92 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 2 , 'pwd-1234' , 'BMW' , 'Advanced' , 2020 , 15000 , 80 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 3 , 'peg-5520' , 'Pegeaut' , '207' , 1999 , 100000 , 15 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 4 , 'fer-1111' , 'Ferrari' , 'Vermelha' , 2014 , 15000 , 75 ); INSERT INTO dbo . carros ( id_carro , placa , marca , modelo , ano , kmatual , valorkm ) VALUES ( 5 , 'cit-9999' , 'Citroen' , 'c3' , 2006 , 45000 , 40 );","title":"Insert Into Carros"}]}